import 'package:flutter/material.dart';

void main() {
  runApp(
    MaterialApp(
      debugShowCheckedModeBanner: false,
      home: MyApp(),
    ),
  );
}

class BalanceModel {
  final String date;
  final double opening;
  final double closing;
  final double receipts;

  BalanceModel({
    required this.date,
    required this.opening,
    required this.closing,
    required this.receipts,
  });

  static const List months = [
    "january",
    "febuary",
    "march",
    "april",
    "may",
    "june",
    "july",
    "august",
    "september",
    "october",
    "november",
    "december",
  ];

  static List<BalanceModel> getData(List data) {
    List<BalanceModel> result = [];
    for (var month in months) {
      double openValue = 0;
      double closeValue = 0;

      var year = '';

      for (var e in data) {
        if (e['serviceDescription'] == "Opening Balance") {
          var rawYear = e['financialYear'] as String;
          year = rawYear.substring(0, rawYear.lastIndexOf('/'));
          openValue =
              e[month] is int ? double.parse(e[month].toString()) : e[month];
        } else if (e['serviceDescription'] == "Closing Balance") {
          closeValue =
              e[month] is int ? double.parse(e[month].toString()) : e[month];
        }
      }
      result.add(
        BalanceModel(
          date: "$month $year",
          opening: openValue,
          closing: closeValue,
          receipts: closeValue - openValue,
        ),
      );
    }

    return result;
  }
}

class MyApp extends StatefulWidget {
  @override
  _State createState() => _State();
}

class _State extends State<MyApp> {
  List myData = [
    {
      "transGroup": 1,
      "transType": 0,
      "serviceTypeId": 0,
      "serviceDescription": "Opening Balance",
      "financialYear": "2022/2023",
      "july": 54818.34,
      "august": 54818.34,
      "september": 0,
      "october": 0,
      "november": 0,
      "december": 0,
      "january": 0,
      "febuary": 0,
      "march": 0,
      "april": 0,
      "may": 0,
      "june": 0
    },
    {
      "transGroup": 990,
      "transType": 0,
      "serviceTypeId": 0,
      "serviceDescription": "Closing Balance",
      "financialYear": "2022/2023",
      "july": 54818.34,
      "august": 54818.34,
      "september": 0,
      "october": 0,
      "november": 0,
      "december": 0,
      "january": 0,
      "febuary": 0,
      "march": 0,
      "april": 0,
      "may": 0,
      "june": 0
    }
  ];

  void _runFilter(String enteredKeyword) {
    if (enteredKeyword.isEmpty) {
      results = BalanceModel.getData(myData);
    } else {
      results = BalanceModel.getData(myData)
          .where(
            (data) => data.date.contains(
                  enteredKeyword.toLowerCase(),
                ),
          )
          .toList();
    }
  }

  // This list holds the data for the list view
  List _foundUsers = [];
  List results = [];
  var result;
  @override
  initState() {
    _foundUsers = myData;
    result = BalanceModel.getData(myData);
    print(result);
    super.initState();
  }

  @override
  Widget build(BuildContext context) {
    print(result.length);
    return Scaffold(
      appBar: AppBar(
        title: Text('Name here'),
      ),
      body: Column(
        children: [
          Padding(
            padding: const EdgeInsets.all(10),
            child: TextFormField(
              onChanged: (value) => _runFilter(value),
              decoration: const InputDecoration(
                border: OutlineInputBorder(),
              ),
            ),
          ),
          Expanded(
            child: ListView.builder(
              padding: const EdgeInsets.all(10),
              shrinkWrap: true,
              itemCount: result.length,
              itemBuilder: (context, index) {
                return Card(
                  child: ListTile(
                    leading: Text(
                      'R - ${result[index].receipts.toString()}',
                    ),
                    title: Text(
                      'M - ${result[index].date.toString()}',
                    ),
                    subtitle: Text(
                      'O - ${result[index].opening.toString()}\nC - ${result[index].closing.toString()}',
                    ),
                  ),
                );
              },
            ),
          ),
        ],
      ),
    );
  }
}
